import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Send, Bot, User, Loader2 } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";

interface Message {
  id: string;
  type: "user" | "bot";
  content: string;
  timestamp: Date;
}

interface AvailabilityChatProps {
  onSlotsCreate: (timeRanges: Array<{day: Date; startTime: Date; endTime: Date}>, sessionType: string) => void;
}

export const AvailabilityChat = ({ onSlotsCreate }: AvailabilityChatProps) => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      type: "bot",
      content: `–ü—Ä–∏–≤—ñ—Ç! –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Å–µ—Å—ñ—ó:
      
üìã **15-—Ö–≤–∏–ª–∏–Ω–Ω—ñ** - –∫–æ—Ä–æ—Ç–∫—ñ –æ–∑–Ω–∞–π–æ–º—á—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
üïê **60/90-—Ö–≤–∏–ª–∏–Ω–Ω—ñ** - –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω—ñ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–Ω—ñ —Å–µ—Å—ñ—ó

–ü–æ—Ç—ñ–º –Ω–∞–ø–∏—à—ñ—Ç—å –∫–æ–ª–∏ –≤–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: '–∑–∞–≤—Ç—Ä–∞ –∑ 14:00 –¥–æ 16:00'. –¢–∏–ø —Å–µ—Å—ñ—ó –≤–∏–∑–Ω–∞—á–∞—î –¥–ª—è —è–∫–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –±—É–¥—É—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ —Ü—ñ —Å–ª–æ—Ç–∏.`,
      timestamp: new Date()
    }
  ]);
  const [input, setInput] = useState("");
  const [sessionType, setSessionType] = useState<"15min" | "60min">("60min");
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  const parseAvailability = async (text: string) => {
    try {
      const { data, error } = await supabase.functions.invoke('parse-availability', {
        body: { text }
      });

      if (error) throw error;
      return data;
    } catch (error) {
      console.error('Error parsing availability:', error);
      throw error;
    }
  };

  const handleSendMessage = async () => {
    if (!input.trim() || loading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: "user", 
      content: input,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInput("");
    setLoading(true);

    try {
      const result = await parseAvailability(input);
      
      if (result.timeRanges && result.timeRanges.length > 0) {
        const timeRanges = result.timeRanges.map((range: any) => ({
          day: new Date(range.date),
          startTime: new Date(range.startTime),
          endTime: new Date(range.endTime)
        }));

        await onSlotsCreate(timeRanges, sessionType);

        const sessionTypeText = sessionType === "15min" ? "15-—Ö–≤–∏–ª–∏–Ω–Ω–∏—Ö –æ–∑–Ω–∞–π–æ–º—á–∏—Ö" : "60/90-—Ö–≤–∏–ª–∏–Ω–Ω–∏—Ö –æ—Å–Ω–æ–≤–Ω–∏—Ö";
        const botMessage: Message = {
          id: (Date.now() + 1).toString(),
          type: "bot",
          content: `‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ ${timeRanges.length} —Å–ª–æ—Ç(—ñ–≤) –¥–ª—è **${sessionTypeText}** —Å–µ—Å—ñ–π! 
          
${sessionType === "15min" ? "üü¢" : "üîµ"} –¶—ñ —Å–ª–æ—Ç–∏ —Ç–µ–ø–µ—Ä –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞–º–∏.
          
–Ø–∫—â–æ –≤ —Ü—å–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –±—É–ª–∏ —ñ—Å–Ω—É—é—á—ñ —Å–ª–æ—Ç–∏ —Ç–æ–≥–æ –∂ —Ç–∏–ø—É, –≤–æ–Ω–∏ –∑–∞–º—ñ–Ω–µ–Ω—ñ –Ω–æ–≤–∏–º–∏.`,
          timestamp: new Date()
        };

        setMessages(prev => [...prev, botMessage]);

        toast({
          title: "–£—Å–ø—ñ—Ö",
          description: `–°—Ç–≤–æ—Ä–µ–Ω–æ ${timeRanges.length} —Å–ª–æ—Ç(—ñ–≤) –¥–ª—è ${sessionType === "15min" ? "15—Ö–≤" : "60/90—Ö–≤"} —Å–µ—Å—ñ–π`
        });
      } else {
        const botMessage: Message = {
          id: (Date.now() + 1).toString(),
          type: "bot",
          content: "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —á–∞—Å —É –≤–∞—à–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –±—ñ–ª—å—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: '–∑–∞–≤—Ç—Ä–∞ –∑ 14:00 –¥–æ 16:00'. –ü–∞–º'—è—Ç–∞–π—Ç–µ, —â–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ - 8 –≥–æ–¥–∏–Ω.",
          timestamp: new Date()
        };

        setMessages(prev => [...prev, botMessage]);
      }
    } catch (error) {
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: "bot", 
        content: "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
        timestamp: new Date()
      };

      setMessages(prev => [...prev, botMessage]);

      toast({
        variant: "destructive",
        title: "–ü–æ–º–∏–ª–∫–∞",
        description: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <Card className="mb-8">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <Bot className="h-5 w-5" />
            –ê—Å–∏—Å—Ç–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
          </CardTitle>
          <div className="flex items-center gap-2">
            <span className="text-sm text-muted-foreground">–¢–∏–ø —Å–µ—Å—ñ—ó:</span>
            <select
              value={sessionType}
              onChange={(e) => setSessionType(e.target.value as "15min" | "60min")}
              className="px-3 py-1 rounded border bg-background text-sm"
            >
              <option value="15min">üü¢ 15 —Ö–≤ (–æ–∑–Ω–∞–π–æ–º—á—ñ)</option>
              <option value="60min">üîµ 60/90 —Ö–≤ (–æ—Å–Ω–æ–≤–Ω—ñ)</option>
            </select>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="h-64 overflow-y-auto space-y-3 p-4 border rounded-lg bg-muted/20">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex gap-3 ${message.type === "user" ? "justify-end" : "justify-start"}`}
              >
                <div className={`flex gap-2 max-w-[80%] ${message.type === "user" ? "flex-row-reverse" : "flex-row"}`}>
                  <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                    message.type === "user" 
                      ? "bg-primary text-primary-foreground" 
                      : "bg-secondary text-secondary-foreground"
                  }`}>
                    {message.type === "user" ? <User className="h-4 w-4" /> : <Bot className="h-4 w-4" />}
                  </div>
                  <div className={`rounded-lg p-3 ${
                    message.type === "user"
                      ? "bg-primary text-primary-foreground ml-auto"
                      : "bg-background border"
                  }`}>
                    <p className="text-sm">{message.content}</p>
                  </div>
                </div>
              </div>
            ))}
            {loading && (
              <div className="flex gap-3 justify-start">
                <div className="flex gap-2">
                  <div className="w-8 h-8 rounded-full flex items-center justify-center bg-secondary text-secondary-foreground">
                    <Bot className="h-4 w-4" />
                  </div>
                  <div className="rounded-lg p-3 bg-background border">
                    <div className="flex items-center gap-2">
                      <Loader2 className="h-4 w-4 animate-spin" />
                      <span className="text-sm text-muted-foreground">–ê–Ω–∞–ª—ñ–∑—É—é...</span>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
          
          <div className="flex gap-2">
            <Input
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="–û–ø–∏—à—ñ—Ç—å –∫–æ–ª–∏ –≤–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ..."
              disabled={loading}
            />
            <Button 
              onClick={handleSendMessage}
              disabled={!input.trim() || loading}
              size="sm"
            >
              <Send className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};